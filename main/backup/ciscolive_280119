--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.14
-- Dumped by pg_dump version 9.5.14

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: interview; Type: SCHEMA; Schema: -; Owner: ciscolive
--

CREATE SCHEMA interview;


ALTER SCHEMA interview OWNER TO ciscolive;

--
-- Name: marketing; Type: SCHEMA; Schema: -; Owner: ciscolive
--

CREATE SCHEMA marketing;


ALTER SCHEMA marketing OWNER TO ciscolive;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: assigned_tasks; Type: TABLE; Schema: interview; Owner: ciscolive
--

CREATE TABLE interview.assigned_tasks (
    task_id integer NOT NULL,
    loc_answer integer,
    epoch integer NOT NULL,
    person_id character varying(1000) NOT NULL,
    user_answer integer
);


ALTER TABLE interview.assigned_tasks OWNER TO ciscolive;

--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE; Schema: interview; Owner: ciscolive
--

CREATE SEQUENCE interview.assigned_tasks_epoch_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE interview.assigned_tasks_epoch_seq OWNER TO ciscolive;

--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE OWNED BY; Schema: interview; Owner: ciscolive
--

ALTER SEQUENCE interview.assigned_tasks_epoch_seq OWNED BY interview.assigned_tasks.epoch;


--
-- Name: persons; Type: TABLE; Schema: interview; Owner: ciscolive
--

CREATE TABLE interview.persons (
    current_task integer,
    name character varying,
    surname character varying,
    email character varying,
    id character varying(1000) NOT NULL,
    tech character varying(10)
);


ALTER TABLE interview.persons OWNER TO ciscolive;

--
-- Name: TABLE persons; Type: COMMENT; Schema: interview; Owner: ciscolive
--

COMMENT ON TABLE interview.persons IS 'This is table to store information about webex''s users that are taking interview';


--
-- Name: tasks; Type: TABLE; Schema: interview; Owner: ciscolive
--

CREATE TABLE interview.tasks (
    task text,
    picture_path character varying(200),
    answer integer,
    variants character varying[],
    id integer NOT NULL,
    tech character varying(10),
    explain text
);


ALTER TABLE interview.tasks OWNER TO ciscolive;

--
-- Name: TABLE tasks; Type: COMMENT; Schema: interview; Owner: ciscolive
--

COMMENT ON TABLE interview.tasks IS 'This is table to store tasks for interview';


--
-- Name: tasks_id_seq; Type: SEQUENCE; Schema: interview; Owner: ciscolive
--

CREATE SEQUENCE interview.tasks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE interview.tasks_id_seq OWNER TO ciscolive;

--
-- Name: tasks_id_seq; Type: SEQUENCE OWNED BY; Schema: interview; Owner: ciscolive
--

ALTER SEQUENCE interview.tasks_id_seq OWNED BY interview.tasks.id;


--
-- Name: assigned_tasks; Type: TABLE; Schema: marketing; Owner: ciscolive
--

CREATE TABLE marketing.assigned_tasks (
    task_id integer NOT NULL,
    person_id character varying(1000) NOT NULL,
    status character varying(10) DEFAULT 'sent'::character varying,
    epoch integer NOT NULL
);


ALTER TABLE marketing.assigned_tasks OWNER TO ciscolive;

--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE; Schema: marketing; Owner: ciscolive
--

CREATE SEQUENCE marketing.assigned_tasks_epoch_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marketing.assigned_tasks_epoch_seq OWNER TO ciscolive;

--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE OWNED BY; Schema: marketing; Owner: ciscolive
--

ALTER SEQUENCE marketing.assigned_tasks_epoch_seq OWNED BY marketing.assigned_tasks.epoch;


--
-- Name: persons; Type: TABLE; Schema: marketing; Owner: ciscolive
--

CREATE TABLE marketing.persons (
    current_task integer,
    name character varying,
    surname character varying,
    email character varying,
    id character varying(1000) NOT NULL,
    room_id character varying(1000) NOT NULL
);


ALTER TABLE marketing.persons OWNER TO ciscolive;

--
-- Name: received_content; Type: TABLE; Schema: marketing; Owner: ciscolive
--

CREATE TABLE marketing.received_content (
    task_id integer NOT NULL,
    person_id character varying(1000) NOT NULL,
    received_photos character varying,
    received_links character varying,
    status character varying(10) DEFAULT 'received'::character varying,
    epoch integer NOT NULL
);


ALTER TABLE marketing.received_content OWNER TO ciscolive;

--
-- Name: received_content_epoch_seq; Type: SEQUENCE; Schema: marketing; Owner: ciscolive
--

CREATE SEQUENCE marketing.received_content_epoch_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marketing.received_content_epoch_seq OWNER TO ciscolive;

--
-- Name: received_content_epoch_seq1; Type: SEQUENCE; Schema: marketing; Owner: ciscolive
--

CREATE SEQUENCE marketing.received_content_epoch_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marketing.received_content_epoch_seq1 OWNER TO ciscolive;

--
-- Name: received_content_epoch_seq1; Type: SEQUENCE OWNED BY; Schema: marketing; Owner: ciscolive
--

ALTER SEQUENCE marketing.received_content_epoch_seq1 OWNED BY marketing.received_content.epoch;


--
-- Name: runs; Type: TABLE; Schema: marketing; Owner: ciscolive
--

CREATE TABLE marketing.runs (
    run_count integer NOT NULL
);


ALTER TABLE marketing.runs OWNER TO ciscolive;

--
-- Name: runs_run_count_seq; Type: SEQUENCE; Schema: marketing; Owner: ciscolive
--

CREATE SEQUENCE marketing.runs_run_count_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marketing.runs_run_count_seq OWNER TO ciscolive;

--
-- Name: runs_run_count_seq; Type: SEQUENCE OWNED BY; Schema: marketing; Owner: ciscolive
--

ALTER SEQUENCE marketing.runs_run_count_seq OWNED BY marketing.runs.run_count;


--
-- Name: tasks; Type: TABLE; Schema: marketing; Owner: ciscolive
--

CREATE TABLE marketing.tasks (
    task text,
    id integer NOT NULL
);


ALTER TABLE marketing.tasks OWNER TO ciscolive;

--
-- Name: tasks_id_seq; Type: SEQUENCE; Schema: marketing; Owner: ciscolive
--

CREATE SEQUENCE marketing.tasks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marketing.tasks_id_seq OWNER TO ciscolive;

--
-- Name: tasks_id_seq; Type: SEQUENCE OWNED BY; Schema: marketing; Owner: ciscolive
--

ALTER SEQUENCE marketing.tasks_id_seq OWNED BY marketing.tasks.id;


--
-- Name: epoch; Type: DEFAULT; Schema: interview; Owner: ciscolive
--

ALTER TABLE ONLY interview.assigned_tasks ALTER COLUMN epoch SET DEFAULT nextval('interview.assigned_tasks_epoch_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: interview; Owner: ciscolive
--

ALTER TABLE ONLY interview.tasks ALTER COLUMN id SET DEFAULT nextval('interview.tasks_id_seq'::regclass);


--
-- Name: epoch; Type: DEFAULT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.assigned_tasks ALTER COLUMN epoch SET DEFAULT nextval('marketing.assigned_tasks_epoch_seq'::regclass);


--
-- Name: epoch; Type: DEFAULT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.received_content ALTER COLUMN epoch SET DEFAULT nextval('marketing.received_content_epoch_seq1'::regclass);


--
-- Name: run_count; Type: DEFAULT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.runs ALTER COLUMN run_count SET DEFAULT nextval('marketing.runs_run_count_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.tasks ALTER COLUMN id SET DEFAULT nextval('marketing.tasks_id_seq'::regclass);


--
-- Data for Name: assigned_tasks; Type: TABLE DATA; Schema: interview; Owner: ciscolive
--

COPY interview.assigned_tasks (task_id, loc_answer, epoch, person_id, user_answer) FROM stdin;
19	5	161	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	2
26	1	162	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	3
20	3	163	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	2
\.


--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE SET; Schema: interview; Owner: ciscolive
--

SELECT pg_catalog.setval('interview.assigned_tasks_epoch_seq', 163, true);


--
-- Data for Name: persons; Type: TABLE DATA; Schema: interview; Owner: ciscolive
--

COPY interview.persons (current_task, name, surname, email, id, tech) FROM stdin;
\N	Alexey	Sazhin	asazhin@cisco.com	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	Collab
\.


--
-- Data for Name: tasks; Type: TABLE DATA; Schema: interview; Owner: ciscolive
--

COPY interview.tasks (task, picture_path, answer, variants, id, tech, explain) FROM stdin;
PSTN phone calls User A and she answers the call. Then User A hits 'Transfer' softkey, dials User B and hits 'Transfer' again before User B answered the call.<br/>\nPSTN caller hears ringback. Which device generates ringback in this scenario?	Question_4.png	3	{"CUCM sends SIP '180 Ringing' message from User B to CUBE, which forwards it to ITSP. Service Provider generates ringback","The phone of User B generates ringback and sends it to PSTN caller in established media stream.","CUCM allocates an Annunciator device and connects it to PSTN caller. Annunciator generates ringback","CUCM allocates an MTP device and connects it to PSTN caller. MTP generates ringback"}	20	Collab	Annunciator device is required to provide ringback (as well as other call progress tones) to SIP Trunks or gateways.<br/>\nhttps://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/srnd/collab10/collab10/media.html#pgfId-1046552
Which statement has higher preference for inbound SIP dial-peer matching?	\N	4	{"incoming called-number <DNIS>","incoming target <ipv4:IP-address-of-remote-node>","incoming uri to <id>","incoming uri via <id>"}	22	Collab	https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/voice/cube/configuration/cube-book/cube-dp.html
LDAP-synchronized user reports that when she tries to log into Self-Care Portal, she gets an error 'Username or password is incorrect. Please try again'<br/>\nAssuming LDAP Authentication is configured, which RTMT logs will show authentication process and the error?	\N	3	{"Cisco DyrSync","Cisco CCM User Web Service","Cisco Tomcat Security Logs","EventViewer - SystemLog"}	17	Collab	Identity Management System (IMS) performs authentication for all web-based requests. If required, it sends a request directly to LDAP server for authentication. IMS logs may be collected via RTMT > Cisco Tomcat Security Logs or via CLI 'file get activelog /tomcat/logs/security/log4j/*'\nhttps://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/srnd/collab11/collab11/directry.html#pgfId-1070369
Acme Corp has successfully deployed Jabber with SAML SSO. IdP is currently authenticates users based on login/password.<br/>\nThe management would like to switch authentication method at IDP to certificate-based.<br/>\nOnce the required changes are performed on IdP and users are provided with certificates, which changes will UC administrator need to implement at CUCM cluster?	\N	5	{"Upload Root CA certificate for user certificates as a Tomcat-trust","Export metadata from CUCM cluster and upload it to IdP","Reboot CUCM cluster","A, B and C","no changes at CUCM side required"}	19	Collab	This is the beauty of SAML SSO protocol. Service Provider (CUCM) does not depend in any way on authentication policies of IdP.<br/>\nhttps://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/SAML_SSO_deployment_guide/12_0_1/cucm_b_saml-sso-deployment-guide-1201/cucm_b_saml-sso-deployment-guide-1201_chapter_01.html\n
Acme Corp has deployed CUCM 12.x and Jabber 12.x. Which protocol will Jabber use to obtain 'jabber-config.xml'?	\N	4	{"TFTP over UDP/69","HTTP over TCP/8080","HTTP over TCP/6970","HTTPS over TCP/6972"}	21	Collab	Starting from version 11.x Jabber will use secure HTTPS connection over 6972 port for downloading TFTP files, if CUCM has version 11.x or higher\nhttps://www.cisco.com/c/en/us/td/docs/voice_ip_comm/jabber/Windows/12_1/RN/jabw_b_release-notes-for-cisco-jabber_121.html#CJAB_RF_P3A082A9_00
user at EU cluster calls a user at US cluster.</br>\nBased on SIP 200 OK message from US cluster to EU cluster (see the picture attached), which cluster and when will send a session refreshment reINVITE?	Question_2.png	4	{"EU cluster in 1800 seconds","EU cluster in 180 seconds","US cluster in 1800 seconds","US cluster in 900 seconds"}	18	Collab	See the line 'Session-Expires:  1800;refresher=uas'. Session refreshment happens once half the session interval has elapsed.<br/>\nUAS, which is US cluster for EU->US call, will be a refresher in this call.<br/>\nhttps://tools.ietf.org/html/rfc4028
Acme Corp has two CUCM clusters in the same domain and is planning to deploy Cisco Jabber. How should a collaboration engineer create DNS SRV record for _cisco-uds._tcp service?	\N	2	{"It is not possible to implement Jabber in deployments, where multiple clusters have the same domain.","Point DNS SRV records to any cluster (or both) and configure ILS between the clusters","Point DNS SRV records to any cluster (or both) and enable OAuth with Refresh Login","In multi-cluster deployments it is required to statically point Jabber client to CUCM cluster using 'Advanced Settings'"}	23	Collab	https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/jabber/Windows/9_7/CJAB_BK_C606D8A9_00_cisco-jabber-dns-configuration-guide/CJAB_BK_C606D8A9_00_cisco-jabber-dns-configuration-guide_chapter_00.html#CJAB_CN_C3B4BFBF_00\n
UC administrator needs to interconnect a local CUCM with partner's IP PBX via SIP. The partner would like to receive SIP Early Offer. How UC administrator may satisfy that requirement?	\N	1	{"Modify 'Early Offer support for voice and video calls' parameter in SIP Profile for the respective SIP Trunk","Modify 'Early Offer support for voice and video calls' Service Parameter. It enables Early Offer globally for all SIP trunks.","CUCM cannot do Early Offer. Need to install CUBE and configure 'voice-class sip early-offer forced' on dial-peers","No changes required. CUCM sends Early Offer by default"}	24	Collab	It is a SIP Profile setting. By default, CUCM sends Delayed Offer<br/>\nhttps://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/srnd/collab10/collab10/trunks.html#11824
Which statement is true about Multi-Server SAN certificates in CUCM?	\N	4	{"SAN certificates in CUCM are always self-signed","If SAN certificate is already installed and you are adding a new node to the cluster, the certificate and private key will be automatically replicated to the new node","To install Multi-Server certificate, Administrator needs to generate CSR on each node in the cluster, consolidate CSRs, sign the resulting CSR and upload the same signed certificate to each node.","To install Multi-Server certificate, Administrator needs to generate CSR on the Publisher only, sign CSR and upload the signed certificate to the Publisher only. It will be distributed across nodes automatically"}	25	Collab	https://www.cisco.com/c/en/us/support/docs/unified-communications/unified-communications-manager-callmanager/118731-configure-san-00.html
Which feature at IM&P does NOT require an External Database?	\N	1	{"Multiple Device Messaging (MDM)","Message Archiver","Managed File Transfer (MFT)","Persistent Chat"}	26	Collab	https://www.cisco.com/c/en/us/td/docs/voice_ip_comm/cucm/srnd/collab11/collab11/presence.html
\.


--
-- Name: tasks_id_seq; Type: SEQUENCE SET; Schema: interview; Owner: ciscolive
--

SELECT pg_catalog.setval('interview.tasks_id_seq', 26, true);


--
-- Data for Name: assigned_tasks; Type: TABLE DATA; Schema: marketing; Owner: ciscolive
--

COPY marketing.assigned_tasks (task_id, person_id, status, epoch) FROM stdin;
\.


--
-- Name: assigned_tasks_epoch_seq; Type: SEQUENCE SET; Schema: marketing; Owner: ciscolive
--

SELECT pg_catalog.setval('marketing.assigned_tasks_epoch_seq', 79, true);


--
-- Data for Name: persons; Type: TABLE DATA; Schema: marketing; Owner: ciscolive
--

COPY marketing.persons (current_task, name, surname, email, id, room_id) FROM stdin;
\.


--
-- Data for Name: received_content; Type: TABLE DATA; Schema: marketing; Owner: ciscolive
--

COPY marketing.received_content (task_id, person_id, received_photos, received_links, status, epoch) FROM stdin;
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\2\\111.jpg	\N	received	56
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\2\\ispeakcisco.jpg	\N	received	57
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	58
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	59
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	60
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	61
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	62
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	63
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	64
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	65
2	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	\N	https://facebook.com/1234	received	66
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	67
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	68
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\check-2.jpg	\N	received	69
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	70
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	71
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	72
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	73
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	74
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	75
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	76
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	77
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	78
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	79
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	80
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\111.jpg	\N	received	81
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	82
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	83
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\configuration_error.png	\N	received	84
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\configuration_error.png	\N	received	85
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\111.jpg	\N	received	86
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\111.jpg	\N	received	87
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	88
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	89
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	90
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\111.jpg	\N	received	91
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	92
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	93
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\111.jpg	\N	received	94
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	95
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\check-2.jpg	\N	received	96
5	Y2lzY29zcGFyazovL3VzL1BFT1BMRS85MjI1MGE0OC1jOTU1LTQ0YzEtOTMxMi0zNjMxNWMzMDJlMjg	received_pictures/sazhin_alexey_Y2lz\\5\\222.jpg	\N	received	97
\.


--
-- Name: received_content_epoch_seq; Type: SEQUENCE SET; Schema: marketing; Owner: ciscolive
--

SELECT pg_catalog.setval('marketing.received_content_epoch_seq', 1, false);


--
-- Name: received_content_epoch_seq1; Type: SEQUENCE SET; Schema: marketing; Owner: ciscolive
--

SELECT pg_catalog.setval('marketing.received_content_epoch_seq1', 97, true);


--
-- Data for Name: runs; Type: TABLE DATA; Schema: marketing; Owner: ciscolive
--

COPY marketing.runs (run_count) FROM stdin;
1
\.


--
-- Name: runs_run_count_seq; Type: SEQUENCE SET; Schema: marketing; Owner: ciscolive
--

SELECT pg_catalog.setval('marketing.runs_run_count_seq', 1, false);


--
-- Data for Name: tasks; Type: TABLE DATA; Schema: marketing; Owner: ciscolive
--

COPY marketing.tasks (task, id) FROM stdin;
This is task1	1
This is task2	2
This is task3	3
This is task4	4
This is task5	5
This is task6	6
This is task7	7
\.


--
-- Name: tasks_id_seq; Type: SEQUENCE SET; Schema: marketing; Owner: ciscolive
--

SELECT pg_catalog.setval('marketing.tasks_id_seq', 7, true);


--
-- Name: assigned_tasks_pkey; Type: CONSTRAINT; Schema: interview; Owner: ciscolive
--

ALTER TABLE ONLY interview.assigned_tasks
    ADD CONSTRAINT assigned_tasks_pkey PRIMARY KEY (person_id, task_id);


--
-- Name: persons_pkey; Type: CONSTRAINT; Schema: interview; Owner: ciscolive
--

ALTER TABLE ONLY interview.persons
    ADD CONSTRAINT persons_pkey PRIMARY KEY (id);


--
-- Name: tasks_pkey; Type: CONSTRAINT; Schema: interview; Owner: ciscolive
--

ALTER TABLE ONLY interview.tasks
    ADD CONSTRAINT tasks_pkey PRIMARY KEY (id);


--
-- Name: assigned_tasks_pkey; Type: CONSTRAINT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.assigned_tasks
    ADD CONSTRAINT assigned_tasks_pkey PRIMARY KEY (task_id, person_id);


--
-- Name: tasks_pkey; Type: CONSTRAINT; Schema: marketing; Owner: ciscolive
--

ALTER TABLE ONLY marketing.tasks
    ADD CONSTRAINT tasks_pkey PRIMARY KEY (id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

